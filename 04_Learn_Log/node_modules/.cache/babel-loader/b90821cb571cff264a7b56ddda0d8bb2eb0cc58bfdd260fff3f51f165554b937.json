{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zly\\\\Desktop\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\react-source\\\\04_Learn_Log\\\\src\\\\App.js\";\nimport { useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet temp;\nconst App = () => {\n  /*\r\n  *   获取原生的DOM对象\r\n  *       1.可以使用传统的document来对DOM进行操作\r\n  *       2.直接从React处获取DOM对象\r\n  *           步骤：\r\n  *               1.创建一个存储DOM对象的容器\r\n  *                   - 使用 useRef() 钩子函数\r\n  *                       钩子函数的注意事项：\r\n  *                           ① React中的钩子函数只能用于函数组件或自定义钩子\r\n  *                           ② 钩子函数只能直接在函数组件中调用\r\n  *               2.将容器设置为想要获取DOM对象元素的ref属性\r\n  *                   <h1 ref={xxx}>....</h1>\r\n  *                   - React会自动将当前元素的DOM对象，设置为容器current属性\r\n  *\r\n  *   useRef()\r\n  *       - 返回的就是一个普通的JS对象\r\n  *       - {current:undefined}\r\n  *       - 所以我们直接创建一个js对象，也可以代替useRef()\r\n  *       - 区别：\r\n  *           我们创建的对象，组件每次重新渲染都会创建一个新对象\r\n  *           useRef()创建的对象，可以确保每次渲染获取到的都是同一个对象\r\n  *\r\n  *       - 当你需要一个对象不会因为组件的重新渲染而改变时，就可以使用useRef()\r\n  *\r\n  * */\n  // const clickHandler = ()=>{\n  //   const header = document.getElementById(\"header\")\n  //   header.innerHTML = \"哈哈\"\n  // }\n  const h1Ref = {\n    current: null\n  };\n  console.log(temp === h1Ref);\n  console.log(h1Ref);\n  temp = h1Ref;\n  const countAddHandler = () => {\n    setCount(prevState => prevState + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"header\",\n      ref: h1Ref,\n      children: \"\\u6211\\u662F\\u6807\\u9898\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","jsxDEV","_jsxDEV","temp","App","h1Ref","current","console","log","countAddHandler","setCount","prevState","className","children","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/zly/Desktop/前端学习/react-source/04_Learn_Log/src/App.js"],"sourcesContent":["import { useRef } from 'react'\r\nimport './App.css'\r\nlet temp;\r\nconst App = ()=>{\r\n    /*\r\n    *   获取原生的DOM对象\r\n    *       1.可以使用传统的document来对DOM进行操作\r\n    *       2.直接从React处获取DOM对象\r\n    *           步骤：\r\n    *               1.创建一个存储DOM对象的容器\r\n    *                   - 使用 useRef() 钩子函数\r\n    *                       钩子函数的注意事项：\r\n    *                           ① React中的钩子函数只能用于函数组件或自定义钩子\r\n    *                           ② 钩子函数只能直接在函数组件中调用\r\n    *               2.将容器设置为想要获取DOM对象元素的ref属性\r\n    *                   <h1 ref={xxx}>....</h1>\r\n    *                   - React会自动将当前元素的DOM对象，设置为容器current属性\r\n    *\r\n    *   useRef()\r\n    *       - 返回的就是一个普通的JS对象\r\n    *       - {current:undefined}\r\n    *       - 所以我们直接创建一个js对象，也可以代替useRef()\r\n    *       - 区别：\r\n    *           我们创建的对象，组件每次重新渲染都会创建一个新对象\r\n    *           useRef()创建的对象，可以确保每次渲染获取到的都是同一个对象\r\n    *\r\n    *       - 当你需要一个对象不会因为组件的重新渲染而改变时，就可以使用useRef()\r\n    *\r\n    * */\r\n  // const clickHandler = ()=>{\r\n  //   const header = document.getElementById(\"header\")\r\n  //   header.innerHTML = \"哈哈\"\r\n  // }\r\n    const h1Ref = {current:null};\r\n    console.log(temp === h1Ref);\r\n    console.log(h1Ref)\r\n    temp = h1Ref;\r\n    const countAddHandler = ()=>{\r\n      setCount(prevState => prevState + 1);\r\n    };\r\n  return <div className=\"app\">\r\n    {/* 当点击+时,数字增大 */}\r\n    <h1 id='header'  ref={h1Ref}>我是标题</h1>\r\n    <button>1</button>\r\n    <button>2</button>\r\n  </div>\r\n}\r\nexport default App"],"mappings":";AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,OAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAClB,IAAIC,IAAI;AACR,MAAMC,GAAG,GAAGA,CAAA,KAAI;EACZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;EACA;EACE,MAAMC,KAAK,GAAG;IAACC,OAAO,EAAC;EAAI,CAAC;EAC5BC,OAAO,CAACC,GAAG,CAACL,IAAI,KAAKE,KAAK,CAAC;EAC3BE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;EAClBF,IAAI,GAAGE,KAAK;EACZ,MAAMI,eAAe,GAAGA,CAAA,KAAI;IAC1BC,QAAQ,CAACC,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;EACtC,CAAC;EACH,oBAAOT,OAAA;IAAKU,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAEzBX,OAAA;MAAIY,EAAE,EAAC,QAAQ;MAAEC,GAAG,EAAEV,KAAM;MAAAQ,QAAA,EAAC;IAAI;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtCjB,OAAA;MAAAW,QAAA,EAAQ;IAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAClBjB,OAAA;MAAAW,QAAA,EAAQ;IAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AACR,CAAC;AAAAC,EAAA,GA3CKhB,GAAG;AA4CT,eAAeA,GAAG;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}