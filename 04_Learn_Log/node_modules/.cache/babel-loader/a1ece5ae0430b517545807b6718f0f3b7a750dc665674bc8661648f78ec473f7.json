{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zly\\\\Desktop\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\react-source\\\\04_Learn_Log\\\\src\\\\App.js\";\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  // 在React中，当组件渲染完毕后，在修改组件中的变量不会使组件重新渲染\n  // 要使组件可以受到变量的影响，必须在变量修改后对组件进行重新渲染\n  // 这里我们就需要一个特殊变量，当这个变量被修改时，组件会自动重新渲染\n\n  // state相当于是一个变量\n  // 只是这个变量在React中进行了注册\n  // React会监控这个变量的变化，当state发生变化时，会自动触发组件的重新渲染\n  // 使得我们的修改可以在页面中呈现出来\n  let counter = 1;\n  const addHanlder = () => {\n    counter++;\n    console.log(counter);\n  };\n  const lessHanlder = () => {\n    counter--;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHanlder,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: lessHanlder,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 10\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","counter","addHanlder","console","log","lessHanlder","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/zly/Desktop/前端学习/react-source/04_Learn_Log/src/App.js"],"sourcesContent":["import { useState } from 'react'\r\nimport './App.css'\r\nconst App = ()=>{\r\n  // 在React中，当组件渲染完毕后，在修改组件中的变量不会使组件重新渲染\r\n  // 要使组件可以受到变量的影响，必须在变量修改后对组件进行重新渲染\r\n  // 这里我们就需要一个特殊变量，当这个变量被修改时，组件会自动重新渲染\r\n\r\n  // state相当于是一个变量\r\n  // 只是这个变量在React中进行了注册\r\n  // React会监控这个变量的变化，当state发生变化时，会自动触发组件的重新渲染\r\n  // 使得我们的修改可以在页面中呈现出来\r\n  let counter = 1\r\n  const addHanlder = ()=>{\r\n    counter++\r\n    console.log(counter)\r\n  }\r\n  const lessHanlder = ()=>{\r\n    counter--\r\n  }\r\n  return <div className=\"app\">\r\n    {/* 当点击+时,数字增大 */}\r\n    <h1>{counter}</h1>\r\n    <button onClick={addHanlder}>+</button>\r\n    <button onClick={lessHanlder}>-</button>\r\n  </div>\r\n}\r\nexport default App"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAClB,MAAMC,GAAG,GAAGA,CAAA,KAAI;EACd;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA,IAAIC,OAAO,GAAG,CAAC;EACf,MAAMC,UAAU,GAAGA,CAAA,KAAI;IACrBD,OAAO,EAAE;IACTE,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;EACtB,CAAC;EACD,MAAMI,WAAW,GAAGA,CAAA,KAAI;IACtBJ,OAAO,EAAE;EACX,CAAC;EACD,oBAAOF,OAAA;IAAKO,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAEzBR,OAAA;MAAAQ,QAAA,EAAKN;IAAO;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClBZ,OAAA;MAAQa,OAAO,EAAEV,UAAW;MAAAK,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvCZ,OAAA;MAAQa,OAAO,EAAEP,WAAY;MAAAE,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AACR,CAAC;AAAAE,EAAA,GAvBKb,GAAG;AAwBT,eAAeA,GAAG;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}