{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zly\\\\Desktop\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\react-source\\\\04_Learn_Log\\\\src\\\\components\\\\User.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class User extends Component {\n  constructor() {\n    super(...arguments);\n    // 类组件的props是存储到类的实例对象中\n    // 可以直接通过实例对象访问\n    // this.props\n    // 类组件中state统一存储到了实例对象的state属性中\n    // 可以通过 this.state来访问\n    // 通过this.setState()对其进行修改\n    // 当我们通过this.setState()修改state时，React只会修改设置了的属性\n    // 函数组件中，响应函数直接以函数的形式定义在组件中\n    // 但是在类组件中，响应函数是以类的方法来定义，之前的属性都会保留\n    // 但是这你仅限于直接存储于state中的属性\n    // 获取DOM对象\n    // 1.创建一个属性，用来存储DOM对象  divRef = React.createRef();\n    // 2.将这个属性设置为指定元素的ref值\n    // 创建属性存储DOM对象\n    this.divRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      count: 0,\n      test: '哈哈',\n      obj: {\n        name: '孙悟空',\n        age: 18\n      }\n    };\n    this.clickHandler = () => {\n      this.setState(preState => {\n        return {\n          count: preState.count + 1\n        };\n      });\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.clickHandler,\n        children: \"\\u70B9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u59D3\\u540D:\", this.props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u5E74\\u9F84:\", this.props.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u6027\\u522B:\", this.props.gender]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","User","constructor","arguments","divRef","createRef","state","count","test","obj","name","age","clickHandler","setState","preState","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","props","gender"],"sources":["C:/Users/zly/Desktop/前端学习/react-source/04_Learn_Log/src/components/User.js"],"sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class User extends Component {\r\n  // 类组件的props是存储到类的实例对象中\r\n  // 可以直接通过实例对象访问\r\n  // this.props\r\n\r\n  // 类组件中state统一存储到了实例对象的state属性中\r\n  // 可以通过 this.state来访问\r\n  // 通过this.setState()对其进行修改\r\n  // 当我们通过this.setState()修改state时，React只会修改设置了的属性\r\n\r\n  // 函数组件中，响应函数直接以函数的形式定义在组件中\r\n  // 但是在类组件中，响应函数是以类的方法来定义，之前的属性都会保留\r\n  // 但是这你仅限于直接存储于state中的属性\r\n\r\n  // 获取DOM对象\r\n  // 1.创建一个属性，用来存储DOM对象  divRef = React.createRef();\r\n  // 2.将这个属性设置为指定元素的ref值\r\n\r\n  // 创建属性存储DOM对象\r\n  divRef = React.createRef();\r\n\r\n  state = {\r\n    count: 0,\r\n    test: '哈哈',\r\n    obj: {name: '孙悟空', age: 18}\r\n  }\r\n  clickHandler = ()=>{\r\n    this.setState(preState => {\r\n      return {\r\n        count:preState.count+1\r\n      }\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>{this.state.count}</h1>\r\n        <button onClick={this.clickHandler}>点</button>\r\n        <ul>\r\n          <li>姓名:{this.props.name}</li>\r\n          <li>年龄:{this.props.age}</li>\r\n          <li>性别:{this.props.gender}</li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,MAAMC,IAAI,SAASH,SAAS,CAAC;EAAAI,YAAA;IAAA,SAAAC,SAAA;IAC1C;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IAEA;IAAA,KACAC,MAAM,gBAAGP,KAAK,CAACQ,SAAS,CAAC,CAAC;IAAA,KAE1BC,KAAK,GAAG;MACNC,KAAK,EAAE,CAAC;MACRC,IAAI,EAAE,IAAI;MACVC,GAAG,EAAE;QAACC,IAAI,EAAE,KAAK;QAAEC,GAAG,EAAE;MAAE;IAC5B,CAAC;IAAA,KACDC,YAAY,GAAG,MAAI;MACjB,IAAI,CAACC,QAAQ,CAACC,QAAQ,IAAI;QACxB,OAAO;UACLP,KAAK,EAACO,QAAQ,CAACP,KAAK,GAAC;QACvB,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;EAAA;EACDQ,MAAMA,CAAA,EAAG;IACP,oBACEf,OAAA;MAAAgB,QAAA,gBACEhB,OAAA;QAAAgB,QAAA,EAAK,IAAI,CAACV,KAAK,CAACC;MAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC3BpB,OAAA;QAAQqB,OAAO,EAAE,IAAI,CAACT,YAAa;QAAAI,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9CpB,OAAA;QAAAgB,QAAA,gBACEhB,OAAA;UAAAgB,QAAA,GAAI,eAAG,EAAC,IAAI,CAACM,KAAK,CAACZ,IAAI;QAAA;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC7BpB,OAAA;UAAAgB,QAAA,GAAI,eAAG,EAAC,IAAI,CAACM,KAAK,CAACX,GAAG;QAAA;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC5BpB,OAAA;UAAAgB,QAAA,GAAI,eAAG,EAAC,IAAI,CAACM,KAAK,CAACC,MAAM;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAEV;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}