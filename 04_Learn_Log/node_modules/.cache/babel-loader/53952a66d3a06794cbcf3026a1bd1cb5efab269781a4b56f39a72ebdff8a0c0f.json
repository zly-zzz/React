{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zly\\\\Desktop\\\\\\u524D\\u7AEF\\u5B66\\u4E60\\\\react-source\\\\04_Learn_Log\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // 在React中，当组件渲染完毕后，在修改组件中的变量不会使组件重新渲染\n  // 要使组件可以受到变量的影响，必须在变量修改后对组件进行重新渲染\n  // 这里我们就需要一个特殊变量，当这个变量被修改时，组件会自动重新渲染\n\n  // state相当于是一个变量\n  // 只是这个变量在React中进行了注册\n  // React会监控这个变量的变化，当state发生变化时，会自动触发组件的重新渲染\n  // 使得我们的修改可以在页面中呈现出来\n  // 在函数组件中，我们需要钩子函数，获取state\n  // 使用钩子useState()来创建state\n  // 它需要一个值作为参数，这个值就是state的初始值，该函数会返回一个数组\n  // 数组中第一个元素是初始值  --- 初始值只用来显示数据，直接修改不会触发组件的重新渲染\n  // 数组中第二个元素是一个函数 --- 这个函数用来修改state，调用其修改state后会触发组件的重新渲染\n\n  /*\r\n  *   state\r\n  *     - state实际就是一个被React管理的变量\r\n  *         当我们通过setState()修改变量的值时，会触发组件的自动重新渲染\r\n  *     - 只有state值发生变化时，组件才会重新渲染\r\n  *     - 当state的值是一个对象时，修改时是使用新的对象去替换已有对象\r\n  *     - 当通过setState去修改一个state时，并不表示修改当前的state\r\n  *         它修改的是组件下一次渲染时state值\r\n  *     - setState()会触发组件的重新渲染，它是异步的,会有一个队列，和vue的原理相同\r\n  *           所以当调用setState()需要用旧state的值时，一定要注意\r\n  *           有可能出现计算错误的情况\r\n  *           为了避免这种情况，可以通过为setState()传递回调函数的形式来修改state值\r\n  *\r\n  * */\n\n  const [counter, setCounter] = useState(1);\n  const [user, setUser] = useState({\n    name: '孙悟空',\n    age: 18\n  });\n  const addHanlder = () => {\n    setTimeout(() => {\n      setCounter(counter + 1);\n    }, 1000);\n  };\n  const lessHanlder = () => {\n    setCounter(counter - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addHanlder,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: lessHanlder,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n};\n_s(App, \"bHJEO8gAMgrznQjOwPhsnslM0C4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","App","_s","counter","setCounter","user","setUser","name","age","addHanlder","setTimeout","lessHanlder","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/zly/Desktop/前端学习/react-source/04_Learn_Log/src/App.js"],"sourcesContent":["import { useState } from 'react'\r\nimport './App.css'\r\nconst App = ()=>{\r\n  // 在React中，当组件渲染完毕后，在修改组件中的变量不会使组件重新渲染\r\n  // 要使组件可以受到变量的影响，必须在变量修改后对组件进行重新渲染\r\n  // 这里我们就需要一个特殊变量，当这个变量被修改时，组件会自动重新渲染\r\n\r\n  // state相当于是一个变量\r\n  // 只是这个变量在React中进行了注册\r\n  // React会监控这个变量的变化，当state发生变化时，会自动触发组件的重新渲染\r\n  // 使得我们的修改可以在页面中呈现出来\r\n  // 在函数组件中，我们需要钩子函数，获取state\r\n  // 使用钩子useState()来创建state\r\n  // 它需要一个值作为参数，这个值就是state的初始值，该函数会返回一个数组\r\n  // 数组中第一个元素是初始值  --- 初始值只用来显示数据，直接修改不会触发组件的重新渲染\r\n  // 数组中第二个元素是一个函数 --- 这个函数用来修改state，调用其修改state后会触发组件的重新渲染\r\n\r\n\r\n      /*\r\n    *   state\r\n    *     - state实际就是一个被React管理的变量\r\n    *         当我们通过setState()修改变量的值时，会触发组件的自动重新渲染\r\n    *     - 只有state值发生变化时，组件才会重新渲染\r\n    *     - 当state的值是一个对象时，修改时是使用新的对象去替换已有对象\r\n    *     - 当通过setState去修改一个state时，并不表示修改当前的state\r\n    *         它修改的是组件下一次渲染时state值\r\n    *     - setState()会触发组件的重新渲染，它是异步的,会有一个队列，和vue的原理相同\r\n    *           所以当调用setState()需要用旧state的值时，一定要注意\r\n    *           有可能出现计算错误的情况\r\n    *           为了避免这种情况，可以通过为setState()传递回调函数的形式来修改state值\r\n    *\r\n    * */\r\n\r\n\r\n  const [counter, setCounter] = useState(1)\r\n  const [user, setUser] = useState({name: '孙悟空', age: 18})\r\n  const addHanlder = ()=>{\r\n    setTimeout(()=>{\r\n      setCounter(counter+1)\r\n    },1000)\r\n  }\r\n  const lessHanlder = ()=>{\r\n    setCounter(counter-1)\r\n  }\r\n  return <div className=\"app\">\r\n    {/* 当点击+时,数字增大 */}\r\n    <h1>{counter}</h1>\r\n    <button onClick={addHanlder}>+</button>\r\n    <button onClick={lessHanlder}>-</button>\r\n  </div>\r\n}\r\nexport default App"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAClB,MAAMC,GAAG,GAAGA,CAAA,KAAI;EAAAC,EAAA;EACd;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGI;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC;IAACS,IAAI,EAAE,KAAK;IAAEC,GAAG,EAAE;EAAE,CAAC,CAAC;EACxD,MAAMC,UAAU,GAAGA,CAAA,KAAI;IACrBC,UAAU,CAAC,MAAI;MACbN,UAAU,CAACD,OAAO,GAAC,CAAC,CAAC;IACvB,CAAC,EAAC,IAAI,CAAC;EACT,CAAC;EACD,MAAMQ,WAAW,GAAGA,CAAA,KAAI;IACtBP,UAAU,CAACD,OAAO,GAAC,CAAC,CAAC;EACvB,CAAC;EACD,oBAAOH,OAAA;IAAKY,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAEzBb,OAAA;MAAAa,QAAA,EAAKV;IAAO;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClBjB,OAAA;MAAQkB,OAAO,EAAET,UAAW;MAAAI,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvCjB,OAAA;MAAQkB,OAAO,EAAEP,WAAY;MAAAE,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AACR,CAAC;AAAAf,EAAA,CAhDKD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAiDT,eAAeA,GAAG;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}